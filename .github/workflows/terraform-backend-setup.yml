name: 'Terraform Backend Setup'

on:
  workflow_call:
    outputs:
      s3_exists:
        description: "Whether the S3 bucket exists"
        value: ${{ jobs.setup_backend.outputs.s3_exists }}
      dynamodb_exists:
        description: "Whether the DynamoDB table exists"
        value: ${{ jobs.setup_backend.outputs.dynamodb_exists }}

permissions:
  contents: read

jobs:
  setup_backend:
    name: 'Setup Terraform Backend'
    runs-on: ubuntu-latest
    outputs:
      s3_exists: ${{ steps.check_s3.outputs.s3_exists }}
      dynamodb_exists: ${{ steps.check_dynamodb.outputs.dynamodb_exists }}

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

    - name: Check if S3 bucket exists
      id: check_s3
      run: |
        if aws s3api head-bucket --bucket tradevis-terraform-state 2>/dev/null; then
          echo "s3_exists=true" >> $GITHUB_OUTPUT
        else
          echo "s3_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create S3 bucket for Terraform state
      if: steps.check_s3.outputs.s3_exists == 'false'
      run: |
        # Get the current region
        REGION="${{ vars.AWS_REGION || 'us-east-1' }}"
        
        # Create bucket with different commands based on region
        if [ "$REGION" = "us-east-1" ]; then
          # For us-east-1, no LocationConstraint is needed
          aws s3api create-bucket \
            --bucket tradevis-terraform-state \
            --region us-east-1
        else
          # For other regions, specify LocationConstraint
          aws s3api create-bucket \
            --bucket tradevis-terraform-state \
            --region $REGION \
            --create-bucket-configuration LocationConstraint=$REGION
        fi
        
        # Configure bucket properties
        aws s3api put-bucket-versioning \
          --bucket tradevis-terraform-state \
          --versioning-configuration Status=Enabled
        
        aws s3api put-bucket-encryption \
          --bucket tradevis-terraform-state \
          --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
        
        aws s3api put-public-access-block \
          --bucket tradevis-terraform-state \
          --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"

    - name: Check if DynamoDB table exists
      id: check_dynamodb
      run: |
        if aws dynamodb describe-table --table-name terraform-state-lock 2>/dev/null; then
          echo "dynamodb_exists=true" >> $GITHUB_OUTPUT
        else
          echo "dynamodb_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create DynamoDB table for state locking
      if: steps.check_dynamodb.outputs.dynamodb_exists == 'false'
      run: |
        aws dynamodb create-table \
          --table-name terraform-state-lock \
          --attribute-definitions AttributeName=LockID,AttributeType=S \
          --key-schema AttributeName=LockID,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST \
          --tags Key=Name,Value="Terraform State Lock" 