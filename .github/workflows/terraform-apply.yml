name: 'Terraform Apply'

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Check if S3 bucket exists
      id: check_s3
      run: |
        if aws s3api head-bucket --bucket tradevis-terraform-state 2>/dev/null; then
          echo "s3_exists=true" >> $GITHUB_OUTPUT
        else
          echo "s3_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Terraform state resources
      if: steps.check_s3.outputs.s3_exists == 'false'
      run: |
        # Create a temporary file for the bootstrap configuration
        cat > bootstrap.tf <<EOF
        provider "aws" {
          region = "${{ vars.AWS_REGION }}"
        }
        
        # S3 bucket for Terraform state
        resource "aws_s3_bucket" "terraform_state" {
          bucket = "tradevis-terraform-state"
        
          tags = {
            Name = "Terraform State"
          }
        }
        
        # Enable versioning for the S3 bucket
        resource "aws_s3_bucket_versioning" "terraform_state_versioning" {
          bucket = aws_s3_bucket.terraform_state.id
          
          versioning_configuration {
            status = "Enabled"
          }
        }
        
        # Enable server-side encryption for the S3 bucket
        resource "aws_s3_bucket_server_side_encryption_configuration" "terraform_state_encryption" {
          bucket = aws_s3_bucket.terraform_state.id
        
          rule {
            apply_server_side_encryption_by_default {
              sse_algorithm = "AES256"
            }
          }
        }
        
        # Block public access to the S3 bucket
        resource "aws_s3_bucket_public_access_block" "terraform_state_public_access" {
          bucket                  = aws_s3_bucket.terraform_state.id
          block_public_acls       = true
          block_public_policy     = true
          ignore_public_acls      = true
          restrict_public_buckets = true
        }
        
        # DynamoDB table for state locking
        resource "aws_dynamodb_table" "terraform_state_lock" {
          name         = "terraform-state-lock"
          billing_mode = "PAY_PER_REQUEST"
          hash_key     = "LockID"
        
          attribute {
            name = "LockID"
            type = "S"
          }
        
          tags = {
            Name = "Terraform State Lock"
          }
        }
        EOF
        
        # Initialize and apply the bootstrap configuration
        terraform init
        terraform apply -auto-approve
        
        # Remove the bootstrap configuration
        rm bootstrap.tf

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color

    - name: Terraform Apply
      run: terraform apply -auto-approve 