name: 'Terraform Apply'

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

    - name: Check if S3 bucket exists
      id: check_s3
      run: |
        if aws s3api head-bucket --bucket tradevis-terraform-state 2>/dev/null; then
          echo "s3_exists=true" >> $GITHUB_OUTPUT
        else
          echo "s3_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create S3 bucket for Terraform state
      if: steps.check_s3.outputs.s3_exists == 'false'
      run: |
        aws s3api create-bucket \
          --bucket tradevis-terraform-state \
          --region ${{ vars.AWS_REGION || 'us-east-1' }} \
          ${{ vars.AWS_REGION == 'us-east-1' && '' || format('--create-bucket-configuration LocationConstraint={0}', vars.AWS_REGION || 'us-east-1') }}
        
        aws s3api put-bucket-versioning \
          --bucket tradevis-terraform-state \
          --versioning-configuration Status=Enabled
        
        aws s3api put-bucket-encryption \
          --bucket tradevis-terraform-state \
          --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
        
        aws s3api put-public-access-block \
          --bucket tradevis-terraform-state \
          --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"

    - name: Check if DynamoDB table exists
      id: check_dynamodb
      run: |
        if aws dynamodb describe-table --table-name terraform-state-lock 2>/dev/null; then
          echo "dynamodb_exists=true" >> $GITHUB_OUTPUT
        else
          echo "dynamodb_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create DynamoDB table for state locking
      if: steps.check_dynamodb.outputs.dynamodb_exists == 'false'
      run: |
        aws dynamodb create-table \
          --table-name terraform-state-lock \
          --attribute-definitions AttributeName=LockID,AttributeType=S \
          --key-schema AttributeName=LockID,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST \
          --tags Key=Name,Value="Terraform State Lock"

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color

    - name: Terraform Apply
      run: terraform apply -auto-approve 